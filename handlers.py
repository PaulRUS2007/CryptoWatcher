import logging
from difflib import get_close_matches

from aiogram import Router, types, F
from aiogram.filters import Command

from database import add_user, add_subscription, get_user_subscriptions, get_user, add_coin, get_coins, get_last_prices_for_subs_list, get_coin_from_list, get_coins_from_list, delete_user_subscription, update_user_subscription, get_user_subscriptions_settings, delete_coins
from coingecko import fetch_prices
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
from aiogram.utils import markdown
from aiosqlite import Error as SQLError

logger = logging.getLogger(__name__)
router = Router()

available_tickers = {"BitCoin": "bitcoin", "DogeCoin": "dogecoin", "Ethereum": "ethereum", "Other": "other"}

class SubscribeState(StatesGroup):
    waiting_for_ticker = State()
    waiting_for_ticker_setting = State()

def get_main_menu() -> ReplyKeyboardMarkup:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
    :return: ReplyKeyboardMarkup
    """
    keyboard = [
        [KeyboardButton(text=f'–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã')],
        [KeyboardButton(text=f'–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')],
        [KeyboardButton(text=f'–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')],
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=f'–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
        is_persistent=True,
    )

def gen_ticker_kb() -> InlineKeyboardMarkup:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –∫–æ–∏–Ω–æ–≤
    :return: InlineKeyboardMarkup
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=ticker, callback_data=f"sub:{slug}")]
            for ticker, slug in available_tickers.items()
        ]
    )

async def check_ticker_in_db(slug: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–∏–∫–µ—Ä –≤ –ë–î
    :param slug: –ò–º—è —Ç–∏–∫–µ—Ä–∞
    :return: bool
    """
    tickers = await get_coins()
    for ticker in tickers:
        if ticker[0] == slug:
            return True
    return False

async def check_subscription(user_id: int, slug: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —é–∑–µ—Ä –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ä
    :param user_id: User ID
    :param slug: –¢–∏–∫–µ—Ä
    :return:
    """
    subs = await get_user_subscriptions(user_id)
    for user_id, coin, last_alert, alert_threshold, interval in subs:
        if coin == slug:
            return True
    return False

async def add_sub_to_db(user_id: int, slug: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
    :param user_id: id —é–∑–µ—Ä–∞
    :param slug: —Ç–∏–∫–µ—Ä
    :return: None
    """
    if not await check_ticker_in_db(slug):
        logger.debug(f'Ticker {slug} is not in DB')
        await add_coin(slug)
    if not await check_subscription(user_id, slug):
        logger.debug(f'User {user_id} is not subscribed to {slug}')
        await add_subscription(user_id, slug)
        return True
    return False

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    try:
        user = await get_user(message.from_user.id)
        logger.debug(f'User is {user}')
        if not user:
            await add_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=gen_ticker_kb())
        else:
            await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=get_main_menu())
    except SQLError as error:
        logger.error(f'Error: {error}')

@router.callback_query(F.data.startswith("sub:"))
async def callback_subscribe(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    :param state:
    :param callback: –ö–æ–ª–ª–±–µ–∫
    :return: None
    """
    slug = callback.data.split(":")[1]
    if slug == 'other': # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        await callback.message.answer(f'–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã:')
        await state.set_state(SubscribeState.waiting_for_ticker)
    else:
        if await add_sub_to_db(callback.from_user.id, slug):
            await fetch_prices([slug])
            logger.debug(f'User {callback.from_user.id} is not subscribed to {slug}')
            await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            await callback.message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {slug}")
        else:
            logger.debug(f'User {callback.from_user.id} was already subscribed to {slug}')
            await callback.message.answer(f'–í—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {slug} —Ä–∞–Ω–µ–µ')
    await callback.message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:',
                                      reply_markup=get_main_menu())

@router.message(SubscribeState.waiting_for_ticker)
async def process_manual_ticker(message: types.Message, state: FSMContext):
    """
    –†—É—á–Ω–æ–π –≤–≤–æ–¥ –º–æ–Ω–µ—Ç—ã (—Ç–∏–∫–µ—Ä–∞)
    :param message: –ú–æ–Ω–µ—Ç–∞
    :param state: –¢–µ–∫—É—â–∏–π —Å—Ç–µ–π—Ç
    :return:
    """
    ticker = message.text.strip().lower()
    if not ticker.isalpha():
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    try:
        if not await get_coin_from_list(ticker):
            raise SQLError(f'Ticker not found')
        if await add_sub_to_db(message.from_user.id, ticker):
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {ticker}")
        else:
            await message.answer(f'–í—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {ticker} —Ä–∞–Ω–µ–µ')
        # await state.clear()
    except SQLError as error:
        coins = await get_coins_from_list()
        coins_list = []
        for coin in coins:
            coins_list.append(coin[0])
        similar = get_close_matches(message.text.strip().lower(), coins_list)
        await message.answer(f'–ù–µ—Ç —Ç–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã')
        # await message.reply(f'–í–æ–∑–º–æ–∂–Ω–æ –∏–º–µ–ª–æ—Å—å –≤–≤–∏–¥—É {similar[0]}?')
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=s, callback_data=f"sub:{s}")]
                for s in similar
            ]
        )
        await message.reply(f'–í–æ–∑–º–æ–∂–Ω–æ –∏–º–µ–ª–æ—Å—å –≤–≤–∏–¥—É:', reply_markup=kb)
    finally:
        await state.clear()
        # await state.set_state(SubscribeState.waiting_for_ticker)

@router.message(F.text=='–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
async def handle_my_subs(message: types.Message) -> None:
    """
    –û—Ç–¥–∞—ë—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —é–∑–µ—Ä–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :return: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.debug(f'Try to get subs')
    subs = await get_user_subscriptions(message.from_user.id)
    logger.debug(f'User\'s subs: {subs}')
    answer = ''
    answer += f'–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n'
    for user_id, coin, last_alert, alert_threshold, interval in subs:
        answer += f'{markdown.bold(coin.upper())}\n'
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f"change:subscriptions")]
        ]
    )
    await message.answer(answer, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb)

@router.message(F.text == '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
async def handle_add_new_sub(message: types.Message) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :return: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.debug(f'Try to add new subs')
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=gen_ticker_kb())

@router.message(F.text == '–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã')
async def handle_get_prices(message: types.Message) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –º–æ–Ω–µ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —é–∑–µ—Ä
    :param message:
    :return:
    """
    logger.debug(f'Try to get current prices')
    subs = await get_user_subscriptions(message.from_user.id)
    logger.debug(f'User\'s subs: {subs}')
    prices = await get_last_prices_for_subs_list(subs, 86400)
    logger.debug(f'Last prices: {prices}')
    answer = '–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n'
    # prices = sorted(prices, key=lambda x: x[2])
    for price in prices:
        if price:
            current_price = price[0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –ë–î
            last_price = price[-1]  # –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –ë–î, –Ω–æ –Ω–µ —Ä–∞–Ω–µ–µ 24 —á–∞—Å–æ–≤
            logger.debug(f'Current price for {current_price[0]} = {current_price[1]}, Last price = {last_price[1]}')
            diff = (current_price[1] - last_price[1]) / last_price[1] * 100
            diff_sign = f'üëé' if diff < 0 else f'üëç'
            answer += f'{diff_sign} {markdown.bold(current_price[0].upper())}:\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ \- {markdown.code(f'${current_price[1]}')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ \= {markdown.bold(f'{round(diff, 2)}%')}\n\n'
    if answer == f'–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n':
        await message.answer(f'–¶–µ–Ω—ã –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    else:
        await message.answer(answer, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_menu())

@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def handle_user_settings(message: types.Message) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —é–∑–µ—Ä–∞
    :param message:
    :return:
    """
    await message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã')

@router.callback_query(F.data.startswith('change:'))
async def callback_change_subscriptions(callback: types.CallbackQuery):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
    :param callback:
    :return:
    """
    logger.debug(f'Try to get subs')
    subs = await get_user_subscriptions(callback.from_user.id)
    logger.debug(f'User\'s subs: {subs}')
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f'{coin}', callback_data=f"change_coin:{coin}")]
            for user_id, coin, last_alert, alert_threshold, interval in subs
        ]
    )
    await callback.message.answer(f'–ö–∞–∫—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb)

@router.callback_query(F.data.startswith('delete:'))
async def callback_delete_subscription(callback: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    :param callback:
    :return:
    """
    ticker = callback.data.split(":")[1]
    user_id = callback.from_user.id
    try:
        await delete_user_subscription(user_id, ticker)
        await delete_coins(ticker)
        await callback.message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {ticker} —É–¥–∞–ª–µ–Ω–∞', reply_markup=get_main_menu())
    except SQLError as error:
        await callback.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{error}')

@router.callback_query(F.data.startswith('change_coin:'))
async def callback_change_coin_settings(callback: types.CallbackQuery):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    :param callback:
    :return:
    """
    ticker = callback.data.split(":")[1]
    threshold, timeout = (await get_user_subscriptions_settings(callback.from_user.id, ticker))[0]
    timeout = int(timeout/3600)
    if (timeout < 1) or (timeout > 24):
        raise ValueError
    if (timeout == 1) or (timeout == 21):
        hours = '—á–∞—Å'
    elif (1 < timeout < 5) or (21 < timeout < 25):
        hours = '—á–∞—Å–∞'
    else:
        hours = '—á–∞—Å–æ–≤'
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f'–ü–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Å–µ–π—á–∞—Å {int(threshold)}%)', callback_data=f'manual_settings:threshold:{ticker}')],
            [InlineKeyboardButton(text=f'–¢–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–µ–π—á–∞—Å {int(timeout)} {hours})', callback_data=f'manual_settings:timeout:{ticker}')],
            [InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {ticker}', callback_data=f'delete:{ticker}')]
        ]
    )
    await callback.message.answer(
        text=f'–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
        reply_markup=kb
    )

@router.callback_query(F.data.startswith('manual_settings:'))
async def callback_manual_coin_settings(callback: types.CallbackQuery, state:FSMContext):
    """
    –†—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    :param state:
    :param callback:
    :return:
    """
    action = callback.data.split(':')[1]
    ticker = callback.data.split(':')[2]
    answer = f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Ç 1 –¥–æ 100):' if action == 'threshold' else f'–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —á–∞—Å–∞—Ö):'
    await state.set_data({'action': action, 'ticker': ticker})
    await callback.message.answer(answer)
    await state.set_state(SubscribeState.waiting_for_ticker_setting)

@router.message(SubscribeState.waiting_for_ticker_setting)
async def process_ticker_setting(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()
    action = data['action']
    ticker = data['ticker']
    value = message.text.strip().lower()
    try:
        value = int(value)
        current_threshold, current_timeout = (await get_user_subscriptions_settings(message.from_user.id, ticker))[0]
        answer = ''
        if action == 'threshold':
            if (value<1) or (value>100):
                raise ValueError
            await update_user_subscription(message.from_user.id, ticker, threshold=value, timeout=current_timeout)
            answer = f'–ü–æ—Ä–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è {ticker} –∏–∑–º–µ–Ω—ë–Ω, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {value}%'
        elif action == 'timeout':
            if (value<1) or (value>24):
                raise ValueError
            timeout = value*60*60
            await update_user_subscription(message.from_user.id, ticker, timeout=timeout, threshold=current_threshold)
            if (value == 1) or (value == 21):
                hours = '—á–∞—Å'
            elif (1 < value < 5) or (21 < value < 25):
                hours = '—á–∞—Å–∞'
            else:
                hours = '—á–∞—Å–æ–≤'
            answer = f'–¢–∞–π–º–∞—É—Ç –¥–ª—è {ticker} –∏–∑–º–µ–Ω—ë–Ω, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {value} {hours}'
        await message.answer(answer, reply_markup=get_main_menu())
    except SQLError as error:
        await message.answer(f'–û—à–∏–±–∫–∞: {error}')
    except ValueError as error:
        if action == 'threshold':
            await message.answer(f'–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100')
        elif action == 'timeout':
            await message.answer(f'–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 24')
    finally:
        await state.clear()